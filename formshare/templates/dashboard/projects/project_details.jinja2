{% extends 'dashboard/page.jinja2' %}
{% import 'dashboard/macros/form.jinja2' as form %}


{% block titlesection %}{{ _("Project") }} {% endblock titlesection %}

{% block css %}
    {{ super() }}

    {% cssresource request,'formshare','bsmarkdown' %}
    {% cssresource request,'formshare','leaflet_beautify_marker_icon' %}
    {% cssresource request,'formshare','switchery' %}
    {% cssresource request,'formshare','select2' %}
    {% cssresource request,'formshare','datepicker' %}

    <style>
        span.select2-container {
            z-index:10050;
        }
    </style>

{% endblock css %}

{% block topScripts %}
    {{ super() }}

    {% jsresource request,'formshare','markdown' %}
    {% jsresource request,'formshare','leaflet_beautify_marker_icon' %}
    {% jsresource request,'formshare','taphold' %}
    {% jsresource request,'formshare','clipboard' %}
    {% jsresource request,'formshare','bs-custom-file-input' %}
    {% jsresource request,'formshare','switchery' %}
    {% jsresource request,'formshare','select2' %}
    {% jsresource request,'formshare','datepicker' %}

{% endblock topScripts %}

{% block dashheader %}
    {% block breadcrumbs %}
        {% if projectData.user_collaborates  %}
            <div class="row wrapper border-bottom white-bg page-heading">
                {% include 'dashboard/projects/snippets/brdcrbs_prjdtls.jinja2' %}
            </div>
        {% endif %}
    {% endblock breadcrumbs %}
{% endblock dashheader %}

{% block maincontent %}
    {% if viewingSelfAccount %}
        {{ super() }}
    {% else %}
        {{ form.display_errors(errors,true) }}
        {% if not projectData.user_collaborates  %}
            {% include 'dashboard/profile/snippets/profile_head.jinja2' %}
        {% endif %}
        {% include 'dashboard/projects/snippets/project_details.jinja2' %}
        {% set upload_for_merging = false %}
        {% set action_url = request.route_url('form_add',userid=projectData.owner,projcode=projectData.project_code) %}
        {% include 'dashboard/projects/forms/snippets/upload_form.jinja2' %}
        {% include 'dashboard/projects/snippets/upload_file.jinja2' %}
        {% include 'dashboard/projects/snippets/link_partner.jinja2' %}
        {% if project_partners|length > 0 %}
            {% include 'dashboard/projects/snippets/edit_link_partner.jinja2' %}
        {% endif %}
    {% endif %}

{% endblock maincontent %}

{% block mainsection %}
    {% if viewingSelfAccount %}
        {{ form.display_errors(errors,true) }}
        {% include 'dashboard/projects/snippets/project_details.jinja2' %}
        {% set upload_for_merging = false %}
        {% set action_url = request.route_url('form_add',userid=projectData.owner,projcode=projectData.project_code) %}
        {% include 'dashboard/projects/forms/snippets/upload_form.jinja2' %}
        {% include 'dashboard/projects/snippets/upload_file.jinja2' %}
        {% include 'dashboard/projects/snippets/link_partner.jinja2' %}
        {% if project_partners|length > 0 %}
            {% include 'dashboard/projects/snippets/edit_link_partner.jinja2' %}
        {% endif %}
    {% else %}
        {{ super() }}
    {% endif %}
{% endblock mainsection %}

{% block scripts %}
    {% jsresource request,'formshare','inspinia' %}
    {% include 'dashboard/snippets/change_language.jinja2' %}
    <script>
        $(document).ready(function() {
            let xform_upload_started = false;
            let file_upload_started = false;
            $('#upload_project_file_form').submit(function() {
                $(this).find("button[type='submit']").prop('disabled',true);
                file_upload_started = true;
            });
            $('#upload_file').on('hidden.bs.modal', function () {
                if (file_upload_started)
                    location.reload();
            });

            $('#form_upload_form').submit(function() {
                $(this).find("button[type='submit']").prop('disabled',true);
                xform_upload_started = true;
            });

            $('#upload_form').on('hidden.bs.modal', function () {
                if (xform_upload_started)
                    location.reload();
            });

            $('#access_from').datepicker({
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true,
                format: 'yyyy-mm-dd'
            });

            $('#access_to').datepicker({
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true,
                format: 'yyyy-mm-dd'
            });

            var elem_partners = document.querySelector('.js-switch-partner');
            var overwrite_switch = new Switchery(elem_partners, { color: '#1AB394' });
            var partner_time = document.getElementById("partner_time_bound");
            elem_partners.onchange = function() {
                if (elem_partners.checked) {
                    partner_time.style.display = "block";
                } else {
                    partner_time.style.display = "none";
                }
            };

            function formatPartner (partner) {
                if (!partner.id) {
                    return partner.text;
                }
                let baseUrl = "{{ request.route_url('gravatar') }}";
                let $state = $(
                    '<span><img src="' + baseUrl + '?name=' + partner.text + '&size=45" class="img-flag" /> ' + partner.text + '</span>'
                );
                return $state;
            }

            $(".js-example-data-ajax").select2({
                dropdownParent: $('#link_partner_modal'),
                templateResult: formatPartner,
                ajax: {
                    url: "{{ request.route_url('api_select2_partners',userid=userid) }}",
                    dataType: 'json',
                    delay: 250,
                    data: function (params) {
                        return {
                            q: params.term, // search term
                            page: params.page,
                        };
                    },
                    processResults: function (data, params) {
                        params.page = params.page || 1;
                        return {
                            results: data.results,
                            pagination: {
                                more: (params.page * 10) < data.total
                            }
                        };
                    },
                    cache: true
                }
            });

            {% if project_partners|length > 0 %}

                $('#edit_partner_access_from').datepicker({
                    keyboardNavigation: false,
                    forceParse: false,
                    autoclose: true,
                    format: 'yyyy-mm-dd'
                });

                $('#edit_partner_access_to').datepicker({
                    keyboardNavigation: false,
                    forceParse: false,
                    autoclose: true,
                    format: 'yyyy-mm-dd'
                });

                var elem_partners_edit = document.querySelector('.js-switch-partner-edit');
                var overwrite_switch_edit = new Switchery(elem_partners_edit, { color: '#1AB394' });
                var edit_partner_time = document.getElementById("edit_partner_time_bound");
                elem_partners_edit.onchange = function() {
                    if (elem_partners_edit.checked) {
                        edit_partner_time.style.display = "block";
                    } else {
                        edit_partner_time.style.display = "none";
                    }
                };

                function setSwitchery(switchElement, checkedBool) {
                    if((checkedBool && !switchElement.isChecked()) || (!checkedBool && switchElement.isChecked())) {
                        switchElement.setPosition(true);
                        switchElement.handleOnchange(true);
                    }
}

                var partner_item = $(".partner_item");
                    partner_item.click(function() {
                        var partner_name = $( this ).attr('data-partner-name');
                        var time_bound = $( this ).attr('data-partner-timebound');
                        var access_from = $( this ).attr('data-partner-access-from');
                        access_from = access_from.replace(" 00:00:00","")
                        var access_to = $( this ).attr('data-partner-access-to');
                        access_to = access_to.replace(" 00:00:00","")
                        var action_url = $( this ).attr('urn');
                        $("#edit_link_partner_to_project").prop('action',action_url)
                        $("#partnerwho").text("{{ _('Editing the partner options of') }} " + partner_name);
                        if (time_bound === "1") {
                            setSwitchery(overwrite_switch_edit, true);
                            edit_partner_time.style.display = "block";
                            $("#edit_partner_access_from").val(access_from);
                            $('#edit_partner_access_from').datepicker('update', access_from);
                            $("#edit_partner_access_to").val(access_to);
                            $("#edit_partner_access_to").datepicker('update', access_to)
                        } else {
                            setSwitchery(overwrite_switch_edit, false);
                            edit_partner_time.style.display = "none";
                        }
                    });
                {% if projectDetails.access_type < 4 %}
                    partner_item.on("taphold", function()
                    {
                        var action_url = $( this ).attr('data-partner-remove-url');
                        var partner_name = $( this ).attr('data-partner-name');
                        swal({
                                title: "{{ _('Are you sure that you want to remove ') }}" + partner_name + "?",
                                type: "warning",
                                showCancelButton: true,
                                confirmButtonColor: "#DD6B55",
                                confirmButtonText: "{{ _('Yes, remove it!') }}",
                                cancelButtonText: "{{ _('Oops!, cancel!') }}",
                                closeOnConfirm: true,
                                closeOnCancel: true },
                            function (isConfirm) {
                                if (isConfirm) {
                                    var form = document.createElement('form');
                                    form.setAttribute('method', 'post');
                                    form.setAttribute('action', action_url);
                                    form.style.display = 'hidden';

                                    var i = document.createElement("input"); //input element, text
                                    i.setAttribute('type',"text");
                                    i.setAttribute('name',"csrf_token");
                                    i.setAttribute('value','{{ request.session.get_csrf_token() }}');
                                    form.appendChild(i);

                                    document.body.appendChild(form);
                                    form.submit();
                                }
                            });
                    });
                {% endif %}
            {% endif %}

            {% include 'dashboard/snippets/pop_flash_js.jinja2' %}

            {% include 'dashboard/projects/forms/snippets/upload_form_js.jinja2' %}

            {% for form in forms %}
                {% include 'dashboard/projects/snippets/project_form_odk_item_js.jinja2' %}
            {% endfor %}

            bsCustomFileInput.init();

            var elem = document.querySelector('.js-switch');
            var overwrite_switch = new Switchery(elem, { color: '#1AB394' });

            new ClipboardJS('.clipboard');
            $('.remove_form').click(function () {
                var action_url = $( this ).attr('urn');
                var has_parent = $( this ).attr('data-has-parent');
                var text = "";
                var title = "";
                if (has_parent === "true") {
                    text = "{{ _('Warning, you are going to delete a form that is a subversion of another form. This means that you will REMOVE ALL the data, including previous versions of the data as well!!!') }}";
                    title = "{{ _('Are you sure, really really sure?') }}";
                }
                else {
                    text = "{{ _('All the data in this form will be deleted!') }}";
                    title = "{{ _('Are you sure?') }}";
                }
                swal({
                        title: title,
                        text: text,
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "{{ _('Yes, delete this form!') }}",
                        cancelButtonText: "{{ _('Oops!, cancel!') }}",
                        closeOnConfirm: true,
                        closeOnCancel: true },
                    function (isConfirm) {
                        if (isConfirm) {
                            var form = document.createElement('form');
                            form.setAttribute('method', 'post');
                            form.setAttribute('action', action_url);
                            form.style.display = 'hidden';

                            var i = document.createElement("input"); //input element, text
                            i.setAttribute('type',"text");
                            i.setAttribute('name',"csrf_token");
                            i.setAttribute('value','{{ request.session.get_csrf_token() }}');
                            form.appendChild(i);

                            document.body.appendChild(form);
                            form.submit();
                        }
                    });
            });

            $('.change-status').click(function () {
                var action_url = $( this ).attr('urn');
                var title = $( this ).attr('data-title');
                var message = $( this ).attr('data-message');
                swal({
                        title: title,
                        text: message,
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "{{ _('Yes, go ahead!') }}",
                        cancelButtonText: "{{ _('Oops!, cancel!') }}",
                        closeOnConfirm: true,
                        closeOnCancel: true },
                    function (isConfirm) {
                        if (isConfirm) {
                            var form = document.createElement('form');
                            form.setAttribute('method', 'post');
                            form.setAttribute('action', action_url);
                            form.style.display = 'hidden';

                            var i = document.createElement("input"); //input element, text
                            i.setAttribute('type',"text");
                            i.setAttribute('name',"csrf_token");
                            i.setAttribute('value','{{ request.session.get_csrf_token() }}');
                            form.appendChild(i);

                            document.body.appendChild(form);
                            form.submit();
                        }
                    });
            });

            $('#delete_project').click(function () {
                swal({
                        title: "{{ _('Are you sure?') }}",
                        text: "{{ _('All the data in this project will be deleted!') }}",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#DD6B55",
                        confirmButtonText: "{{ _('Yes, delete it!') }}",
                        cancelButtonText: "{{ _('Oops, cancel!') }}",
                        closeOnConfirm: true,
                        closeOnCancel: true },
                    function (isConfirm) {
                        if (isConfirm) {
                            var form = document.createElement('form');
                            form.setAttribute('method', 'post');
                            form.setAttribute('action', '{{ request.route_url('project_delete',userid=projectData.owner,projcode=projectData.project_code,_query={'fail':request.url}) }}');
                            form.style.display = 'hidden';

                            var i = document.createElement("input"); //input element, text
                            i.setAttribute('type',"text");
                            i.setAttribute('name',"csrf_token");
                            i.setAttribute('value','{{ request.session.get_csrf_token() }}');
                            form.appendChild(i);

                            document.body.appendChild(form);
                            form.submit();
                        }
                    });
            });
            {% if projectData.access_type < 4 %}
                $(".assistant-item").on("taphold", function()
                {
                    var action_url = $( this ).attr('urn');
                    swal({
                            title: "{{ _('Remove assistant') }}",
                            text: "{{ _('Are you sure?') }}",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "{{ _('Yes, remove it!') }}",
                            cancelButtonText: "{{ _('Oops!, cancel!') }}",
                            closeOnConfirm: true,
                            closeOnCancel: true },
                        function (isConfirm) {
                            if (isConfirm) {
                                var form = document.createElement('form');
                                form.setAttribute('method', 'post');
                                form.setAttribute('action', action_url);
                                form.style.display = 'hidden';

                                var i = document.createElement("input"); //input element, text
                                i.setAttribute('type',"text");
                                i.setAttribute('name',"csrf_token");
                                i.setAttribute('value','{{ request.session.get_csrf_token() }}');
                                form.appendChild(i);

                                document.body.appendChild(form);
                                form.submit();
                            }
                        });
                });
                $(".group-item").on("taphold", function()
                {
                    var action_url = $( this ).attr('urn');
                    swal({
                            title: "{{ _('Remove group') }}",
                            text: "{{ _('Are you sure?') }}",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "{{ _('Yes, remove it!') }}",
                            cancelButtonText: "{{ _('Oops!, cancel!') }}",
                            closeOnConfirm: true,
                            closeOnCancel: true },
                        function (isConfirm) {
                            if (isConfirm) {
                                var form = document.createElement('form');
                                form.setAttribute('method', 'post');
                                form.setAttribute('action', action_url);
                                form.style.display = 'hidden';

                                var i = document.createElement("input"); //input element, text
                                i.setAttribute('type',"text");
                                i.setAttribute('name',"csrf_token");
                                i.setAttribute('value','{{ request.session.get_csrf_token() }}');
                                form.appendChild(i);

                                document.body.appendChild(form);
                                form.submit();
                            }
                        });
                });
                $(".file-item").on("taphold", function()
                {
                    var action_url = $( this ).attr('urn');
                    var file_name = $( this ).attr('data-file-name');
                    swal({
                            title: "{{ _('Delete file') }} ",
                            text: "{{ _('Are you sure that you want to delete') }} " + file_name + "?",
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#DD6B55",
                            confirmButtonText: "{{ _('Yes, remove it!') }}",
                            cancelButtonText: "{{ _('Oops!, cancel!') }}",
                            closeOnConfirm: true,
                            closeOnCancel: true },
                        function (isConfirm) {
                            if (isConfirm) {
                                var form = document.createElement('form');
                                form.setAttribute('method', 'post');
                                form.setAttribute('action', action_url);
                                form.style.display = 'hidden';

                                var i = document.createElement("input"); //input element, text
                                i.setAttribute('type',"text");
                                i.setAttribute('name',"csrf_token");
                                i.setAttribute('value','{{ request.session.get_csrf_token() }}');
                                form.appendChild(i);

                                document.body.appendChild(form);
                                form.submit();
                            }
                        });
                });
            {% endif %}

            {% if submissions > 0 and withgps > 0 %}
                var mymap = L.map('projmap').setView([51.505, -0.09], 13);
                L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                    attribution: '© <a href="https://www.mapbox.com/about/maps/">Mapbox</a> © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> <strong><a href="https://www.mapbox.com/map-feedback/" target="_blank">Improve this map</a></strong>',
                    tileSize: 512,
                    maxZoom: 18,
                    zoomOffset: -1,
                    id: 'mapbox/streets-v11',
                    accessToken: 'pk.eyJ1IjoicWxhbmRzIiwiYSI6ImNqZHB1ZDh4YzEwZHEyeG1rcjc0NmFsNzIifQ.i3YebmNDByns1c1ixZE0bA'
                }).addTo(mymap);

                var element = document.getElementById('mapbox');
                var full_screen = false;
                var normal_height = $("#projmap").height();
                new ResizeSensor(element, function() {
                    var window_width = $(window).width();
                    var element_width =  element.clientWidth;
                    if ((element_width / window_width) >= 0.80)
                    {
                        $("#projmap").height($(window).height()-80);
                        mymap.invalidateSize();
                        //console.log('Changed to ' + element.clientWidth);
                        full_screen = true;
                    }
                    else
                    {
                        if (full_screen)
                        {
                            $("#projmap").height(normal_height);
                            mymap.invalidateSize();
                            //console.log('Back to ' + normal_height);
                            //console.log('Changed to ' + element.clientWidth);
                            full_screen = false;
                        }
                    }
                });

                var options = {
                    iconShape: 'circle-dot',
                    borderWidth: 5,
                    borderColor: '#b3334f'
                };

                function get_more(query_from, query_size)
                {

                    let url = new URL("{{ request.route_url('project_download_gpspoints',userid=userid,projcode=projectData.project_code) }}");
                    url.searchParams.append('from', query_from);
                    url.searchParams.append('size', query_size);

                    $.getJSON(url, function( data ) {
                        var markers = [];
                        data.points.forEach(function(entry)
                        {
                            var marker = L.marker([entry.lati, entry.long], {
                                icon: L.BeautifyIcon.icon(entry.options),
                                draggable: false
                            }).addTo(mymap);
                            markers.push(marker);
                        });
                        var group = new L.featureGroup(markers);
                        mymap.fitBounds(group.getBounds());
                    });
                }

                // TODO: We need to perfom pagination here so the size sould not be 10000
                get_more(0,10000);
            {% endif %}

            {% if projectData.project_abstract != None %}
                var val = $("#abstract_hidden").val();
                document.getElementById('project_abstract').innerHTML = markdown.toHTML(val);

                {% if projectData.project_abstract|length < 170 %}
                    $('.scroll_content').slimscroll({'height': '60px'});
                {% else %}
                    $('.scroll_content').slimscroll();
                {% endif %}
            {% endif %}
        });
    </script>
{% endblock scripts %}