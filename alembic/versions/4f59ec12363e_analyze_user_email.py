"""Analyze user email

Revision ID: 4f59ec12363e
Revises: 77d7e4daa88d
Create Date: 2021-02-23 19:21:21.364171

"""
import requests
from pyramid.paster import get_appsettings, setup_logging
from alembic import context
from formshare.processes.elasticsearch.user_index import configure_user_index_manager
import time

# revision identifiers, used by Alembic.
revision = "4f59ec12363e"
down_revision = "77d7e4daa88d"
branch_labels = None
depends_on = None


def upgrade():

    email_analyzer = {
        "settings": {
            "analysis": {
                "filter": {
                    "email": {
                        "type": "pattern_capture",
                        "preserve_original": True,
                        "patterns": ["([^@]+)", "(\\p{L}+)", "(\\d+)", "@(.+)"],
                    }
                },
                "analyzer": {
                    "email": {
                        "tokenizer": "uax_url_email",
                        "filter": ["email", "lowercase", "unique"],
                    }
                },
            }
        }
    }

    config_uri = context.config.get_main_option("formshare.ini.file", None)
    if config_uri is None:
        print(
            "This migration needs parameter 'formshare.ini.file' in the alembic ini file."
        )
        print(
            "The parameter 'formshare.ini.file' must point to the full path of the FormShare ini file"
        )
        exit(1)

    setup_logging(config_uri)
    settings = get_appsettings(config_uri, "formshare")

    use_ssl = settings.get("elasticsearch.user.use_ssl", "False")
    es_host = settings.get("elasticsearch.user.host", "localhost")
    es_port = settings.get("elasticsearch.user.port", 9200)

    ready = False
    print("Waiting for ES to be ready")
    while not ready:
        if use_ssl == "False":
            resp = requests.get("http://{}:{}/_cluster/health".format(es_host, es_port))
        else:
            resp = requests.get(
                "https://{}:{}/_cluster/health".format(es_host, es_port)
            )
        data = resp.json()
        if data["status"] == "yellow" or data["status"] == "green":
            ready = True
        else:
            time.sleep(30)
    print("ES is ready")

    if use_ssl == "False":
        resp = requests.get(
            "http://{}:{}/_cat/indices?format=json".format(es_host, es_port)
        )
    else:
        resp = requests.get(
            "https://{}:{}/_cat/indices?format=json".format(es_host, es_port)
        )
    indexes = resp.json()
    user_index_found = False
    for an_index in indexes:
        if an_index["index"] == settings["elasticsearch.user.index_name"]:
            user_index_found = True

    if user_index_found:
        user_index = configure_user_index_manager(settings)
        es_connection = user_index.create_connection()
        if use_ssl == "False":
            r = requests.post(
                "http://{}:{}/{}/_close".format(
                    user_index.host, user_index.port, user_index.index_name
                )
            )
        else:
            r = requests.post(
                "https://{}:{}/{}/_close".format(
                    user_index.host, user_index.port, user_index.index_name
                )
            )
        if r.status_code != 200:
            print("Cannot close")
            exit(1)
        es_connection.indices.put_settings(
            email_analyzer, index=settings["elasticsearch.user.index_name"]
        )
        if use_ssl == "False":
            r = requests.post(
                "http://{}:{}/{}/_open".format(
                    user_index.host, user_index.port, user_index.index_name
                )
            )
        else:
            r = requests.post(
                "https://{}:{}/{}/_open".format(
                    user_index.host, user_index.port, user_index.index_name
                )
            )
        if r.status_code != 200:
            print("Cannot open")
            exit(1)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
